// <auto-generated />
using System;
using ComicTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComicTracker.Data.Migrations
{
    [DbContext(typeof(ComicTrackerDbContext))]
    [Migration("20210718115004_AddedOtherScoreableEntities")]
    partial class AddedOtherScoreableEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArcArtist", b =>
                {
                    b.Property<int>("ArcsId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.HasKey("ArcsId", "ArtistsId");

                    b.HasIndex("ArtistsId");

                    b.ToTable("ArcArtist");
                });

            modelBuilder.Entity("ArcCharacter", b =>
                {
                    b.Property<int>("ArcsId")
                        .HasColumnType("int");

                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.HasKey("ArcsId", "CharactersId");

                    b.HasIndex("CharactersId");

                    b.ToTable("ArcCharacter");
                });

            modelBuilder.Entity("ArcGenre", b =>
                {
                    b.Property<int>("ArcsId")
                        .HasColumnType("int");

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.HasKey("ArcsId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("ArcGenre");
                });

            modelBuilder.Entity("ArcPublisher", b =>
                {
                    b.Property<int>("ArcsId")
                        .HasColumnType("int");

                    b.Property<int>("PublishersId")
                        .HasColumnType("int");

                    b.HasKey("ArcsId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("ArcPublisher");
                });

            modelBuilder.Entity("ArcVolume", b =>
                {
                    b.Property<int>("ArcsId")
                        .HasColumnType("int");

                    b.Property<int>("VolumesId")
                        .HasColumnType("int");

                    b.HasKey("ArcsId", "VolumesId");

                    b.HasIndex("VolumesId");

                    b.ToTable("ArcVolume");
                });

            modelBuilder.Entity("ArcWriter", b =>
                {
                    b.Property<int>("ArcsId")
                        .HasColumnType("int");

                    b.Property<int>("WritersId")
                        .HasColumnType("int");

                    b.HasKey("ArcsId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("ArcWriter");
                });

            modelBuilder.Entity("ArtistIssue", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.Property<int>("IssuesId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsId", "IssuesId");

                    b.HasIndex("IssuesId");

                    b.ToTable("ArtistIssue");
                });

            modelBuilder.Entity("ArtistSeries", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("ArtistSeries");
                });

            modelBuilder.Entity("ArtistVolume", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.Property<int>("VolumesId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsId", "VolumesId");

                    b.HasIndex("VolumesId");

                    b.ToTable("ArtistVolume");
                });

            modelBuilder.Entity("CharacterIssue", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("IssuesId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "IssuesId");

                    b.HasIndex("IssuesId");

                    b.ToTable("CharacterIssue");
                });

            modelBuilder.Entity("CharacterSeries", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("CharacterSeries");
                });

            modelBuilder.Entity("CharacterVolume", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("VolumesId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "VolumesId");

                    b.HasIndex("VolumesId");

                    b.ToTable("CharacterVolume");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Arc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex(new[] { "SeriesId" }, "IX_Arcs_SeriesId");

                    b.ToTable("Arcs");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.ArcVolume", b =>
                {
                    b.Property<int>("ArcId")
                        .HasColumnType("int");

                    b.Property<int>("VolumeId")
                        .HasColumnType("int");

                    b.HasKey("ArcId", "VolumeId");

                    b.HasIndex(new[] { "VolumeId" }, "IX_ArcVolume_VolumeId");

                    b.ToTable("ArcVolumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex(new[] { "NationalityId" }, "IX_Artists_NationalityId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAppearance")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterArc", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ArcId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainCharacter")
                        .HasColumnType("bit");

                    b.HasKey("CharacterId", "ArcId");

                    b.HasIndex("ArcId");

                    b.ToTable("CharactersArcs");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterIssue", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainCharacter")
                        .HasColumnType("bit");

                    b.HasKey("CharacterId", "IssueId");

                    b.HasIndex("IssueId");

                    b.ToTable("CharactersIssues");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterSeries", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainCharacter")
                        .HasColumnType("bit");

                    b.HasKey("CharacterId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("CharactersSeries");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterVolume", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("VolumeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainCharacter")
                        .HasColumnType("bit");

                    b.HasKey("CharacterId", "VolumeId");

                    b.HasIndex("VolumeId");

                    b.ToTable("CharactersVolumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArcId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex(new[] { "ArcId" }, "IX_Issues_ArcId");

                    b.HasIndex(new[] { "SeriesId" }, "IX_Issues_SeriesId");

                    b.HasIndex(new[] { "VolumeId" }, "IX_Issues_VolumeId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex(new[] { "NationalityId" }, "IX_Publishers_NationalityId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.PublisherIssue", b =>
                {
                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PublisherId", "IssueId");

                    b.HasIndex("IssueId");

                    b.ToTable("PublishersIssues");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.PublisherVolume", b =>
                {
                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("VolumeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PublisherId", "VolumeId");

                    b.HasIndex("VolumeId");

                    b.ToTable("PublishersVolumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Ongoing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserArc", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArcId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ArcId");

                    b.HasIndex("ArcId");

                    b.ToTable("UserArc");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserIssue", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("UserId", "IssueId");

                    b.HasIndex("IssueId");

                    b.ToTable("UserIssue");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserSeries", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("UserSeries");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserVolume", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("UserId", "VolumeId");

                    b.HasIndex("VolumeId");

                    b.ToTable("UserVolume");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Volume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex(new[] { "SeriesId" }, "IX_Volumes_SeriesId");

                    b.ToTable("Volumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Writer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex(new[] { "NationalityId" }, "IX_Writers_NationalityId");

                    b.ToTable("Writers");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("GenreIssue", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("IssuesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "IssuesId");

                    b.HasIndex("IssuesId");

                    b.ToTable("GenreIssue");
                });

            modelBuilder.Entity("GenreSeries", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("GenreSeries");
                });

            modelBuilder.Entity("GenreVolume", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("VolumesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "VolumesId");

                    b.HasIndex("VolumesId");

                    b.ToTable("GenreVolume");
                });

            modelBuilder.Entity("IssuePublisher", b =>
                {
                    b.Property<int>("IssuesId")
                        .HasColumnType("int");

                    b.Property<int>("PublishersId")
                        .HasColumnType("int");

                    b.HasKey("IssuesId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("IssuePublisher");
                });

            modelBuilder.Entity("IssueWriter", b =>
                {
                    b.Property<int>("IssuesId")
                        .HasColumnType("int");

                    b.Property<int>("WritersId")
                        .HasColumnType("int");

                    b.HasKey("IssuesId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("IssueWriter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PublisherSeries", b =>
                {
                    b.Property<int>("PublishersId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("PublishersId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("PublisherSeries");
                });

            modelBuilder.Entity("PublisherVolume", b =>
                {
                    b.Property<int>("PublishersId")
                        .HasColumnType("int");

                    b.Property<int>("VolumesId")
                        .HasColumnType("int");

                    b.HasKey("PublishersId", "VolumesId");

                    b.HasIndex("VolumesId");

                    b.ToTable("PublisherVolume");
                });

            modelBuilder.Entity("SeriesWriter", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("WritersId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("SeriesWriter");
                });

            modelBuilder.Entity("VolumeWriter", b =>
                {
                    b.Property<int>("VolumesId")
                        .HasColumnType("int");

                    b.Property<int>("WritersId")
                        .HasColumnType("int");

                    b.HasKey("VolumesId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("VolumeWriter");
                });

            modelBuilder.Entity("ArcArtist", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", null)
                        .WithMany()
                        .HasForeignKey("ArcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArcCharacter", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", null)
                        .WithMany()
                        .HasForeignKey("ArcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArcGenre", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", null)
                        .WithMany()
                        .HasForeignKey("ArcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArcPublisher", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", null)
                        .WithMany()
                        .HasForeignKey("ArcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArcVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", null)
                        .WithMany()
                        .HasForeignKey("ArcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", null)
                        .WithMany()
                        .HasForeignKey("VolumesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArcWriter", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", null)
                        .WithMany()
                        .HasForeignKey("ArcsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistIssue", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistSeries", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", null)
                        .WithMany()
                        .HasForeignKey("VolumesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterIssue", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSeries", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", null)
                        .WithMany()
                        .HasForeignKey("VolumesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Arc", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Series", "Series")
                        .WithMany("Arcs")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.ArcVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", "Arc")
                        .WithMany("ArcsVolumes")
                        .HasForeignKey("ArcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", "Volume")
                        .WithMany("ArcsVolumes")
                        .HasForeignKey("VolumeId")
                        .IsRequired();

                    b.Navigation("Arc");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Artist", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Nationality", "Nationality")
                        .WithMany("Artists")
                        .HasForeignKey("NationalityId");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterArc", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", "Arc")
                        .WithMany("CharactersArcs")
                        .HasForeignKey("ArcId")
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Character", "Character")
                        .WithMany("CharactersArcs")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Arc");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterIssue", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Character", "Character")
                        .WithMany("CharactersIssues")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", "Issue")
                        .WithMany("CharactersIssues")
                        .HasForeignKey("IssueId")
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterSeries", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Character", "Character")
                        .WithMany("CharactersSeries")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Series", "Series")
                        .WithMany("CharactersSeries")
                        .HasForeignKey("SeriesId")
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.CharacterVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Character", "Character")
                        .WithMany("CharactersVolumes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", "Volume")
                        .WithMany("CharactersVolumes")
                        .HasForeignKey("VolumeId")
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Issue", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", "Arc")
                        .WithMany("Issues")
                        .HasForeignKey("ArcId");

                    b.HasOne("ComicTracker.Data.Models.Entities.Series", "Series")
                        .WithMany("Issues")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", "Volume")
                        .WithMany("Issues")
                        .HasForeignKey("VolumeId");

                    b.Navigation("Arc");

                    b.Navigation("Series");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Publisher", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Nationality", "Nationality")
                        .WithMany("Publishers")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.PublisherIssue", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", "Issue")
                        .WithMany("PublishersIssues")
                        .HasForeignKey("IssueId")
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Publisher", "Publisher")
                        .WithMany("PublishersIssues")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.PublisherVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Publisher", "Publisher")
                        .WithMany("PublishersVolumes")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", "Volume")
                        .WithMany("PublishersVolumes")
                        .HasForeignKey("VolumeId")
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserArc", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Arc", "Arc")
                        .WithMany("UsersArcs")
                        .HasForeignKey("ArcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", "User")
                        .WithMany("UsersArcs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Arc");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserIssue", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", "Issue")
                        .WithMany("UsersIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", "User")
                        .WithMany("UsersIssues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserSeries", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Series", "Series")
                        .WithMany("UsersSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", "User")
                        .WithMany("UsersSeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.UserVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", "User")
                        .WithMany("UsersVolumes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", "Volume")
                        .WithMany("UsersVolumes")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Volume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Series", "Series")
                        .WithMany("Volumes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Writer", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Nationality", "Nationality")
                        .WithMany("Writers")
                        .HasForeignKey("NationalityId");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("GenreIssue", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreSeries", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", null)
                        .WithMany()
                        .HasForeignKey("VolumesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePublisher", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueWriter", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PublisherSeries", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PublisherVolume", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", null)
                        .WithMany()
                        .HasForeignKey("VolumesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SeriesWriter", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VolumeWriter", b =>
                {
                    b.HasOne("ComicTracker.Data.Models.Entities.Volume", null)
                        .WithMany()
                        .HasForeignKey("VolumesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ComicTracker.Data.Models.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ComicTracker.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");

                    b.Navigation("UsersArcs");

                    b.Navigation("UsersIssues");

                    b.Navigation("UsersSeries");

                    b.Navigation("UsersVolumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Arc", b =>
                {
                    b.Navigation("ArcsVolumes");

                    b.Navigation("CharactersArcs");

                    b.Navigation("Issues");

                    b.Navigation("UsersArcs");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Character", b =>
                {
                    b.Navigation("CharactersArcs");

                    b.Navigation("CharactersIssues");

                    b.Navigation("CharactersSeries");

                    b.Navigation("CharactersVolumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Issue", b =>
                {
                    b.Navigation("CharactersIssues");

                    b.Navigation("PublishersIssues");

                    b.Navigation("UsersIssues");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Nationality", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Publishers");

                    b.Navigation("Writers");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Publisher", b =>
                {
                    b.Navigation("PublishersIssues");

                    b.Navigation("PublishersVolumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Series", b =>
                {
                    b.Navigation("Arcs");

                    b.Navigation("CharactersSeries");

                    b.Navigation("Issues");

                    b.Navigation("UsersSeries");

                    b.Navigation("Volumes");
                });

            modelBuilder.Entity("ComicTracker.Data.Models.Entities.Volume", b =>
                {
                    b.Navigation("ArcsVolumes");

                    b.Navigation("CharactersVolumes");

                    b.Navigation("Issues");

                    b.Navigation("PublishersVolumes");

                    b.Navigation("UsersVolumes");
                });
#pragma warning restore 612, 618
        }
    }
}
