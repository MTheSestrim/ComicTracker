@using ComicTracker.Web.ViewModels.Home

@using ComicTracker.Common.Enums

@model HomePageViewModel

@using static ComicTracker.Common.GlobalConstants;
@using static ComicTracker.Common.HomeConstants;


@section Scripts
{
    <script src="@Url.Content("~/js/home.js")" type="text/javascript"></script>
}

@{
    this.ViewData["Title"] = "Home";
}

@{
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var maxPage = Math.Ceiling((double)Model.TotalSeriesCount / SeriesPerPage);

    var sortingValues = Enum.GetValues(typeof(Sorting)).Cast<Sorting>()
        .Select(i => new SelectListItem
        {
            Text = i.ToString(),
            Value = ((int)i).ToString(),
        })
        .ToArray();
}

<div class="text-center">
    <h1 class="display-4">Welcome to @SystemName!</h1>
    <div class="form-group offset-3 col-6">
        <label asp-for="Sorting"></label>
        <select asp-for="Sorting" class="form-control" asp-items="sortingValues">
        </select>
    </div>
    <div class="container">
        @for (int i = 0; i < Model.Series.Count; i += SeriesPerRow)
        {
            // One SeriesPerRow number of series per row
            // i + SeriesPerRow > Model.Count ? Model.Count : i + SeriesPerRow -> Checks where the loop should end
            // If the series are 13 with 4 SeriesPerRow for example,
            // the last row should not loop until 12 + 4 since there will be an IndexOutOfRange exception.
            // Instead, it should loop until the models end rather than overflow the count.
            <div class="row">
                @for (int j = i;
                j < (i + SeriesPerRow > Model.Series.Count ? Model.Series.Count : i + SeriesPerRow);
                j++)
                {
                    <div class="col-6 col-sm-3">
                        <a asp-controller="Series" asp-route-id="@Model.Series[j].Id">
                            <img class="img-thumbnail" src="@Model.Series[j].CoverPath" alt="@CoverNotFoundAltDesc">
                        </a>
                        <div>
                            <p>@Model.Series[j].Name</p>
                            <p>Issues: @Model.Series[j].IssuesCount</p>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : string.Empty)">
                <a class="page-link"
                   asp-controller="Home"
                   asp-action="Index"
                   asp-route-sorting="@Model.Sorting"
                   asp-route-searchTerm="@Model.SearchTerm"
                   asp-route-currentPage="@previousPage"
                   aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>
            @if (Model.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link"
                       asp-controller="Home"
                       asp-action="Index"
                       asp-route-sorting="@Model.Sorting"
                       asp-route-searchTerm="@Model.SearchTerm"
                       asp-route-currentPage="@(Model.CurrentPage - 1)">@(Model.CurrentPage - 1)</a>
                </li>
            }
            <li class="page-item">
                <a class="page-link"
                   asp-controller="Home"
                   asp-action="Index"
                   asp-route-sorting="@Model.Sorting"
                   asp-route-searchTerm="@Model.SearchTerm"
                   asp-route-currentPage="@Model.CurrentPage">@Model.CurrentPage</a>
            </li>
            @if (Model.CurrentPage < Model.MaxPageCount)
            {
                <li class="page-item">
                    <a class="page-link"
                       asp-controller="Home"
                       asp-action="Index"
                       asp-route-sorting="@Model.Sorting"
                       asp-route-searchTerm="@Model.SearchTerm"
                       asp-route-currentPage="@(Model.CurrentPage + 1)">@(Model.CurrentPage + 1)</a>
                </li>
            }
            <li class="page-item @(Model.CurrentPage == Model.MaxPageCount ? "disabled" : string.Empty)">
                <a class="page-link"
                   asp-controller="Home"
                   asp-action="Index"
                   asp-route-sorting="@Model.Sorting"
                   asp-route-searchTerm="@Model.SearchTerm"
                   asp-route-currentPage="@(Model.CurrentPage + 1)"
                   aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        </ul>
    </nav>
</div>